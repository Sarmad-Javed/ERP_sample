#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ERPEntities.DataContext
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ERP")]
	public partial class ERPDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAttendance(Attendance instance);
    partial void UpdateAttendance(Attendance instance);
    partial void DeleteAttendance(Attendance instance);
    partial void InsertEmployee(Employee instance);
    partial void UpdateEmployee(Employee instance);
    partial void DeleteEmployee(Employee instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertSchedule(Schedule instance);
    partial void UpdateSchedule(Schedule instance);
    partial void DeleteSchedule(Schedule instance);
    partial void InsertDoctorSchedule(DoctorSchedule instance);
    partial void UpdateDoctorSchedule(DoctorSchedule instance);
    partial void DeleteDoctorSchedule(DoctorSchedule instance);
    partial void InsertPatient(Patient instance);
    partial void UpdatePatient(Patient instance);
    partial void DeletePatient(Patient instance);
    partial void InsertItem(Item instance);
    partial void UpdateItem(Item instance);
    partial void DeleteItem(Item instance);
    partial void InsertVendor(Vendor instance);
    partial void UpdateVendor(Vendor instance);
    partial void DeleteVendor(Vendor instance);
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertOrder(Order instance);
    partial void UpdateOrder(Order instance);
    partial void DeleteOrder(Order instance);
    partial void InsertOrderDetail(OrderDetail instance);
    partial void UpdateOrderDetail(OrderDetail instance);
    partial void DeleteOrderDetail(OrderDetail instance);
    partial void InsertAppointment(Appointment instance);
    partial void UpdateAppointment(Appointment instance);
    partial void DeleteAppointment(Appointment instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertPrescription(Prescription instance);
    partial void UpdatePrescription(Prescription instance);
    partial void DeletePrescription(Prescription instance);
    partial void InsertMedication(Medication instance);
    partial void UpdateMedication(Medication instance);
    partial void DeleteMedication(Medication instance);
    partial void InsertDoctor(Doctor instance);
    partial void UpdateDoctor(Doctor instance);
    partial void DeleteDoctor(Doctor instance);
    partial void InsertInvoiceDetail(InvoiceDetail instance);
    partial void UpdateInvoiceDetail(InvoiceDetail instance);
    partial void DeleteInvoiceDetail(InvoiceDetail instance);
    partial void InsertStock(Stock instance);
    partial void UpdateStock(Stock instance);
    partial void DeleteStock(Stock instance);
    partial void InsertRequest(Request instance);
    partial void UpdateRequest(Request instance);
    partial void DeleteRequest(Request instance);
    partial void InsertStockIn(StockIn instance);
    partial void UpdateStockIn(StockIn instance);
    partial void DeleteStockIn(StockIn instance);
    partial void InsertStockOut(StockOut instance);
    partial void UpdateStockOut(StockOut instance);
    partial void DeleteStockOut(StockOut instance);
    partial void InsertInvoice(Invoice instance);
    partial void UpdateInvoice(Invoice instance);
    partial void DeleteInvoice(Invoice instance);
    partial void InsertBill(Bill instance);
    partial void UpdateBill(Bill instance);
    partial void DeleteBill(Bill instance);
    partial void InsertBillDetail(BillDetail instance);
    partial void UpdateBillDetail(BillDetail instance);
    partial void DeleteBillDetail(BillDetail instance);
    #endregion
		
		public ERPDataContext() : 
				base(global::ERPEntities.Properties.Settings.Default.ERPConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ERPDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ERPDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ERPDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ERPDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Attendance> Attendances
		{
			get
			{
				return this.GetTable<Attendance>();
			}
		}
		
		public System.Data.Linq.Table<Employee> Employees
		{
			get
			{
				return this.GetTable<Employee>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<Schedule> Schedules
		{
			get
			{
				return this.GetTable<Schedule>();
			}
		}
		
		public System.Data.Linq.Table<DoctorSchedule> DoctorSchedules
		{
			get
			{
				return this.GetTable<DoctorSchedule>();
			}
		}
		
		public System.Data.Linq.Table<Patient> Patients
		{
			get
			{
				return this.GetTable<Patient>();
			}
		}
		
		public System.Data.Linq.Table<Item> Items
		{
			get
			{
				return this.GetTable<Item>();
			}
		}
		
		public System.Data.Linq.Table<Vendor> Vendors
		{
			get
			{
				return this.GetTable<Vendor>();
			}
		}
		
		public System.Data.Linq.Table<Category> Categories
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<Order> Orders
		{
			get
			{
				return this.GetTable<Order>();
			}
		}
		
		public System.Data.Linq.Table<OrderDetail> OrderDetails
		{
			get
			{
				return this.GetTable<OrderDetail>();
			}
		}
		
		public System.Data.Linq.Table<Appointment> Appointments
		{
			get
			{
				return this.GetTable<Appointment>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Prescription> Prescriptions
		{
			get
			{
				return this.GetTable<Prescription>();
			}
		}
		
		public System.Data.Linq.Table<Medication> Medications
		{
			get
			{
				return this.GetTable<Medication>();
			}
		}
		
		public System.Data.Linq.Table<Doctor> Doctors
		{
			get
			{
				return this.GetTable<Doctor>();
			}
		}
		
		public System.Data.Linq.Table<InvoiceDetail> InvoiceDetails
		{
			get
			{
				return this.GetTable<InvoiceDetail>();
			}
		}
		
		public System.Data.Linq.Table<Stock> Stocks
		{
			get
			{
				return this.GetTable<Stock>();
			}
		}
		
		public System.Data.Linq.Table<Request> Requests
		{
			get
			{
				return this.GetTable<Request>();
			}
		}
		
		public System.Data.Linq.Table<StockIn> StockIns
		{
			get
			{
				return this.GetTable<StockIn>();
			}
		}
		
		public System.Data.Linq.Table<StockOut> StockOuts
		{
			get
			{
				return this.GetTable<StockOut>();
			}
		}
		
		public System.Data.Linq.Table<Invoice> Invoices
		{
			get
			{
				return this.GetTable<Invoice>();
			}
		}
		
		public System.Data.Linq.Table<Bill> Bills
		{
			get
			{
				return this.GetTable<Bill>();
			}
		}
		
		public System.Data.Linq.Table<BillDetail> BillDetails
		{
			get
			{
				return this.GetTable<BillDetail>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Attendance")]
	public partial class Attendance : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AttendanceID;
		
		private System.Nullable<int> _EmployeeID;
		
		private string _Month;
		
		private System.Nullable<int> _WorkingDays;
		
		private System.Nullable<int> _Absents;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAttendanceIDChanging(int value);
    partial void OnAttendanceIDChanged();
    partial void OnEmployeeIDChanging(System.Nullable<int> value);
    partial void OnEmployeeIDChanged();
    partial void OnMonthChanging(string value);
    partial void OnMonthChanged();
    partial void OnWorkingDaysChanging(System.Nullable<int> value);
    partial void OnWorkingDaysChanged();
    partial void OnAbsentsChanging(System.Nullable<int> value);
    partial void OnAbsentsChanged();
    #endregion
		
		public Attendance()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttendanceID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AttendanceID
		{
			get
			{
				return this._AttendanceID;
			}
			set
			{
				if ((this._AttendanceID != value))
				{
					this.OnAttendanceIDChanging(value);
					this.SendPropertyChanging();
					this._AttendanceID = value;
					this.SendPropertyChanged("AttendanceID");
					this.OnAttendanceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int")]
		public System.Nullable<int> EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Month", DbType="VarChar(50)")]
		public string Month
		{
			get
			{
				return this._Month;
			}
			set
			{
				if ((this._Month != value))
				{
					this.OnMonthChanging(value);
					this.SendPropertyChanging();
					this._Month = value;
					this.SendPropertyChanged("Month");
					this.OnMonthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkingDays", DbType="Int")]
		public System.Nullable<int> WorkingDays
		{
			get
			{
				return this._WorkingDays;
			}
			set
			{
				if ((this._WorkingDays != value))
				{
					this.OnWorkingDaysChanging(value);
					this.SendPropertyChanging();
					this._WorkingDays = value;
					this.SendPropertyChanged("WorkingDays");
					this.OnWorkingDaysChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Absents", DbType="Int")]
		public System.Nullable<int> Absents
		{
			get
			{
				return this._Absents;
			}
			set
			{
				if ((this._Absents != value))
				{
					this.OnAbsentsChanging(value);
					this.SendPropertyChanging();
					this._Absents = value;
					this.SendPropertyChanged("Absents");
					this.OnAbsentsChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employee")]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EmployeeID;
		
		private string _EmpName;
		
		private string _EmpAddress;
		
		private string _EmpContact;
		
		private string _EmpEmail;
		
		private string _EmpCNIC;
		
		private System.Nullable<System.DateTime> _EmpDOB;
		
		private string _EmpDepartment;
		
		private string _EmpDesignation;
		
		private System.Nullable<double> _EmpRating;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    partial void OnEmpNameChanging(string value);
    partial void OnEmpNameChanged();
    partial void OnEmpAddressChanging(string value);
    partial void OnEmpAddressChanged();
    partial void OnEmpContactChanging(string value);
    partial void OnEmpContactChanged();
    partial void OnEmpEmailChanging(string value);
    partial void OnEmpEmailChanged();
    partial void OnEmpCNICChanging(string value);
    partial void OnEmpCNICChanged();
    partial void OnEmpDOBChanging(System.Nullable<System.DateTime> value);
    partial void OnEmpDOBChanged();
    partial void OnEmpDepartmentChanging(string value);
    partial void OnEmpDepartmentChanged();
    partial void OnEmpDesignationChanging(string value);
    partial void OnEmpDesignationChanged();
    partial void OnEmpRatingChanging(System.Nullable<double> value);
    partial void OnEmpRatingChanged();
    #endregion
		
		public Employee()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmpName", DbType="VarChar(50)")]
		public string EmpName
		{
			get
			{
				return this._EmpName;
			}
			set
			{
				if ((this._EmpName != value))
				{
					this.OnEmpNameChanging(value);
					this.SendPropertyChanging();
					this._EmpName = value;
					this.SendPropertyChanged("EmpName");
					this.OnEmpNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmpAddress", DbType="VarChar(MAX)")]
		public string EmpAddress
		{
			get
			{
				return this._EmpAddress;
			}
			set
			{
				if ((this._EmpAddress != value))
				{
					this.OnEmpAddressChanging(value);
					this.SendPropertyChanging();
					this._EmpAddress = value;
					this.SendPropertyChanged("EmpAddress");
					this.OnEmpAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmpContact", DbType="VarChar(50)")]
		public string EmpContact
		{
			get
			{
				return this._EmpContact;
			}
			set
			{
				if ((this._EmpContact != value))
				{
					this.OnEmpContactChanging(value);
					this.SendPropertyChanging();
					this._EmpContact = value;
					this.SendPropertyChanged("EmpContact");
					this.OnEmpContactChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmpEmail", DbType="VarChar(100)")]
		public string EmpEmail
		{
			get
			{
				return this._EmpEmail;
			}
			set
			{
				if ((this._EmpEmail != value))
				{
					this.OnEmpEmailChanging(value);
					this.SendPropertyChanging();
					this._EmpEmail = value;
					this.SendPropertyChanged("EmpEmail");
					this.OnEmpEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmpCNIC", DbType="VarChar(50)")]
		public string EmpCNIC
		{
			get
			{
				return this._EmpCNIC;
			}
			set
			{
				if ((this._EmpCNIC != value))
				{
					this.OnEmpCNICChanging(value);
					this.SendPropertyChanging();
					this._EmpCNIC = value;
					this.SendPropertyChanged("EmpCNIC");
					this.OnEmpCNICChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmpDOB", DbType="DateTime")]
		public System.Nullable<System.DateTime> EmpDOB
		{
			get
			{
				return this._EmpDOB;
			}
			set
			{
				if ((this._EmpDOB != value))
				{
					this.OnEmpDOBChanging(value);
					this.SendPropertyChanging();
					this._EmpDOB = value;
					this.SendPropertyChanged("EmpDOB");
					this.OnEmpDOBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmpDepartment", DbType="VarChar(50)")]
		public string EmpDepartment
		{
			get
			{
				return this._EmpDepartment;
			}
			set
			{
				if ((this._EmpDepartment != value))
				{
					this.OnEmpDepartmentChanging(value);
					this.SendPropertyChanging();
					this._EmpDepartment = value;
					this.SendPropertyChanged("EmpDepartment");
					this.OnEmpDepartmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmpDesignation", DbType="VarChar(100)")]
		public string EmpDesignation
		{
			get
			{
				return this._EmpDesignation;
			}
			set
			{
				if ((this._EmpDesignation != value))
				{
					this.OnEmpDesignationChanging(value);
					this.SendPropertyChanging();
					this._EmpDesignation = value;
					this.SendPropertyChanged("EmpDesignation");
					this.OnEmpDesignationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmpRating", DbType="Float")]
		public System.Nullable<double> EmpRating
		{
			get
			{
				return this._EmpRating;
			}
			set
			{
				if ((this._EmpRating != value))
				{
					this.OnEmpRatingChanging(value);
					this.SendPropertyChanging();
					this._EmpRating = value;
					this.SendPropertyChanged("EmpRating");
					this.OnEmpRatingChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Roles")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoleID;
		
		private string _RoleName;
		
		private string _RoleDisc;
		
		private EntitySet<User> _Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIDChanging(int value);
    partial void OnRoleIDChanged();
    partial void OnRoleNameChanging(string value);
    partial void OnRoleNameChanged();
    partial void OnRoleDiscChanging(string value);
    partial void OnRoleDiscChanged();
    #endregion
		
		public Role()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string RoleName
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if ((this._RoleName != value))
				{
					this.OnRoleNameChanging(value);
					this.SendPropertyChanging();
					this._RoleName = value;
					this.SendPropertyChanged("RoleName");
					this.OnRoleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleDisc", DbType="VarChar(MAX)")]
		public string RoleDisc
		{
			get
			{
				return this._RoleDisc;
			}
			set
			{
				if ((this._RoleDisc != value))
				{
					this.OnRoleDiscChanging(value);
					this.SendPropertyChanging();
					this._RoleDisc = value;
					this.SendPropertyChanged("RoleDisc");
					this.OnRoleDiscChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_User", Storage="_Users", ThisKey="RoleID", OtherKey="RoleID")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Schedule")]
	public partial class Schedule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EventID;
		
		private string _Subject;
		
		private string _Description;
		
		private System.DateTime _Start;
		
		private System.Nullable<System.DateTime> _End;
		
		private string _Theme;
		
		private bool _IsFullDay;
		
		private EntitySet<DoctorSchedule> _DoctorSchedules;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventIDChanging(int value);
    partial void OnEventIDChanged();
    partial void OnSubjectChanging(string value);
    partial void OnSubjectChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnStartChanging(System.DateTime value);
    partial void OnStartChanged();
    partial void OnEndChanging(System.Nullable<System.DateTime> value);
    partial void OnEndChanged();
    partial void OnThemeChanging(string value);
    partial void OnThemeChanged();
    partial void OnIsFullDayChanging(bool value);
    partial void OnIsFullDayChanged();
    #endregion
		
		public Schedule()
		{
			this._DoctorSchedules = new EntitySet<DoctorSchedule>(new Action<DoctorSchedule>(this.attach_DoctorSchedules), new Action<DoctorSchedule>(this.detach_DoctorSchedules));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EventID
		{
			get
			{
				return this._EventID;
			}
			set
			{
				if ((this._EventID != value))
				{
					this.OnEventIDChanging(value);
					this.SendPropertyChanging();
					this._EventID = value;
					this.SendPropertyChanged("EventID");
					this.OnEventIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Subject", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Subject
		{
			get
			{
				return this._Subject;
			}
			set
			{
				if ((this._Subject != value))
				{
					this.OnSubjectChanging(value);
					this.SendPropertyChanging();
					this._Subject = value;
					this.SendPropertyChanged("Subject");
					this.OnSubjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(300)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Start", DbType="DateTime NOT NULL")]
		public System.DateTime Start
		{
			get
			{
				return this._Start;
			}
			set
			{
				if ((this._Start != value))
				{
					this.OnStartChanging(value);
					this.SendPropertyChanging();
					this._Start = value;
					this.SendPropertyChanged("Start");
					this.OnStartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[End]", Storage="_End", DbType="DateTime")]
		public System.Nullable<System.DateTime> End
		{
			get
			{
				return this._End;
			}
			set
			{
				if ((this._End != value))
				{
					this.OnEndChanging(value);
					this.SendPropertyChanging();
					this._End = value;
					this.SendPropertyChanged("End");
					this.OnEndChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Theme", DbType="NVarChar(15)")]
		public string Theme
		{
			get
			{
				return this._Theme;
			}
			set
			{
				if ((this._Theme != value))
				{
					this.OnThemeChanging(value);
					this.SendPropertyChanging();
					this._Theme = value;
					this.SendPropertyChanged("Theme");
					this.OnThemeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsFullDay", DbType="Bit NOT NULL")]
		public bool IsFullDay
		{
			get
			{
				return this._IsFullDay;
			}
			set
			{
				if ((this._IsFullDay != value))
				{
					this.OnIsFullDayChanging(value);
					this.SendPropertyChanging();
					this._IsFullDay = value;
					this.SendPropertyChanged("IsFullDay");
					this.OnIsFullDayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Schedule_DoctorSchedule", Storage="_DoctorSchedules", ThisKey="EventID", OtherKey="EventID")]
		public EntitySet<DoctorSchedule> DoctorSchedules
		{
			get
			{
				return this._DoctorSchedules;
			}
			set
			{
				this._DoctorSchedules.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DoctorSchedules(DoctorSchedule entity)
		{
			this.SendPropertyChanging();
			entity.Schedule = this;
		}
		
		private void detach_DoctorSchedules(DoctorSchedule entity)
		{
			this.SendPropertyChanging();
			entity.Schedule = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DoctorSchedule")]
	public partial class DoctorSchedule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Doc_ScheduleID;
		
		private int _DoctorID;
		
		private int _EventID;
		
		private EntityRef<Schedule> _Schedule;
		
		private EntityRef<Doctor> _Doctor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDoc_ScheduleIDChanging(int value);
    partial void OnDoc_ScheduleIDChanged();
    partial void OnDoctorIDChanging(int value);
    partial void OnDoctorIDChanged();
    partial void OnEventIDChanging(int value);
    partial void OnEventIDChanged();
    #endregion
		
		public DoctorSchedule()
		{
			this._Schedule = default(EntityRef<Schedule>);
			this._Doctor = default(EntityRef<Doctor>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Doc-ScheduleID]", Storage="_Doc_ScheduleID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Doc_ScheduleID
		{
			get
			{
				return this._Doc_ScheduleID;
			}
			set
			{
				if ((this._Doc_ScheduleID != value))
				{
					this.OnDoc_ScheduleIDChanging(value);
					this.SendPropertyChanging();
					this._Doc_ScheduleID = value;
					this.SendPropertyChanged("Doc_ScheduleID");
					this.OnDoc_ScheduleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoctorID", DbType="Int NOT NULL")]
		public int DoctorID
		{
			get
			{
				return this._DoctorID;
			}
			set
			{
				if ((this._DoctorID != value))
				{
					if (this._Doctor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDoctorIDChanging(value);
					this.SendPropertyChanging();
					this._DoctorID = value;
					this.SendPropertyChanged("DoctorID");
					this.OnDoctorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventID", DbType="Int NOT NULL")]
		public int EventID
		{
			get
			{
				return this._EventID;
			}
			set
			{
				if ((this._EventID != value))
				{
					if (this._Schedule.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventIDChanging(value);
					this.SendPropertyChanging();
					this._EventID = value;
					this.SendPropertyChanged("EventID");
					this.OnEventIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Schedule_DoctorSchedule", Storage="_Schedule", ThisKey="EventID", OtherKey="EventID", IsForeignKey=true)]
		public Schedule Schedule
		{
			get
			{
				return this._Schedule.Entity;
			}
			set
			{
				Schedule previousValue = this._Schedule.Entity;
				if (((previousValue != value) 
							|| (this._Schedule.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Schedule.Entity = null;
						previousValue.DoctorSchedules.Remove(this);
					}
					this._Schedule.Entity = value;
					if ((value != null))
					{
						value.DoctorSchedules.Add(this);
						this._EventID = value.EventID;
					}
					else
					{
						this._EventID = default(int);
					}
					this.SendPropertyChanged("Schedule");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctor_DoctorSchedule", Storage="_Doctor", ThisKey="DoctorID", OtherKey="DoctorID", IsForeignKey=true)]
		public Doctor Doctor
		{
			get
			{
				return this._Doctor.Entity;
			}
			set
			{
				Doctor previousValue = this._Doctor.Entity;
				if (((previousValue != value) 
							|| (this._Doctor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Doctor.Entity = null;
						previousValue.DoctorSchedules.Remove(this);
					}
					this._Doctor.Entity = value;
					if ((value != null))
					{
						value.DoctorSchedules.Add(this);
						this._DoctorID = value.DoctorID;
					}
					else
					{
						this._DoctorID = default(int);
					}
					this.SendPropertyChanged("Doctor");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Patient")]
	public partial class Patient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PatientID;
		
		private string _PatientName;
		
		private string _PatientAddress;
		
		private string _PatientContact;
		
		private string _PatientEmail;
		
		private string _UserName;
		
		private string _Password;
		
		private string _ZIPCode;
		
		private string _PatientImage;
		
		private bool _isAvailable;
		
		private EntitySet<Appointment> _Appointments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPatientIDChanging(int value);
    partial void OnPatientIDChanged();
    partial void OnPatientNameChanging(string value);
    partial void OnPatientNameChanged();
    partial void OnPatientAddressChanging(string value);
    partial void OnPatientAddressChanged();
    partial void OnPatientContactChanging(string value);
    partial void OnPatientContactChanged();
    partial void OnPatientEmailChanging(string value);
    partial void OnPatientEmailChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnZIPCodeChanging(string value);
    partial void OnZIPCodeChanged();
    partial void OnPatientImageChanging(string value);
    partial void OnPatientImageChanged();
    partial void OnisAvailableChanging(bool value);
    partial void OnisAvailableChanged();
    #endregion
		
		public Patient()
		{
			this._Appointments = new EntitySet<Appointment>(new Action<Appointment>(this.attach_Appointments), new Action<Appointment>(this.detach_Appointments));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PatientID
		{
			get
			{
				return this._PatientID;
			}
			set
			{
				if ((this._PatientID != value))
				{
					this.OnPatientIDChanging(value);
					this.SendPropertyChanging();
					this._PatientID = value;
					this.SendPropertyChanged("PatientID");
					this.OnPatientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientName", DbType="VarChar(50)")]
		public string PatientName
		{
			get
			{
				return this._PatientName;
			}
			set
			{
				if ((this._PatientName != value))
				{
					this.OnPatientNameChanging(value);
					this.SendPropertyChanging();
					this._PatientName = value;
					this.SendPropertyChanged("PatientName");
					this.OnPatientNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientAddress", DbType="VarChar(MAX)")]
		public string PatientAddress
		{
			get
			{
				return this._PatientAddress;
			}
			set
			{
				if ((this._PatientAddress != value))
				{
					this.OnPatientAddressChanging(value);
					this.SendPropertyChanging();
					this._PatientAddress = value;
					this.SendPropertyChanged("PatientAddress");
					this.OnPatientAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientContact", DbType="VarChar(50)")]
		public string PatientContact
		{
			get
			{
				return this._PatientContact;
			}
			set
			{
				if ((this._PatientContact != value))
				{
					this.OnPatientContactChanging(value);
					this.SendPropertyChanging();
					this._PatientContact = value;
					this.SendPropertyChanged("PatientContact");
					this.OnPatientContactChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientEmail", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string PatientEmail
		{
			get
			{
				return this._PatientEmail;
			}
			set
			{
				if ((this._PatientEmail != value))
				{
					this.OnPatientEmailChanging(value);
					this.SendPropertyChanging();
					this._PatientEmail = value;
					this.SendPropertyChanged("PatientEmail");
					this.OnPatientEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZIPCode", DbType="VarChar(50)")]
		public string ZIPCode
		{
			get
			{
				return this._ZIPCode;
			}
			set
			{
				if ((this._ZIPCode != value))
				{
					this.OnZIPCodeChanging(value);
					this.SendPropertyChanging();
					this._ZIPCode = value;
					this.SendPropertyChanged("ZIPCode");
					this.OnZIPCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientImage", DbType="VarChar(MAX)")]
		public string PatientImage
		{
			get
			{
				return this._PatientImage;
			}
			set
			{
				if ((this._PatientImage != value))
				{
					this.OnPatientImageChanging(value);
					this.SendPropertyChanging();
					this._PatientImage = value;
					this.SendPropertyChanged("PatientImage");
					this.OnPatientImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isAvailable", DbType="Bit NOT NULL")]
		public bool isAvailable
		{
			get
			{
				return this._isAvailable;
			}
			set
			{
				if ((this._isAvailable != value))
				{
					this.OnisAvailableChanging(value);
					this.SendPropertyChanging();
					this._isAvailable = value;
					this.SendPropertyChanged("isAvailable");
					this.OnisAvailableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Appointment", Storage="_Appointments", ThisKey="PatientID", OtherKey="PatientID")]
		public EntitySet<Appointment> Appointments
		{
			get
			{
				return this._Appointments;
			}
			set
			{
				this._Appointments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Appointments(Appointment entity)
		{
			this.SendPropertyChanging();
			entity.Patient = this;
		}
		
		private void detach_Appointments(Appointment entity)
		{
			this.SendPropertyChanging();
			entity.Patient = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Items")]
	public partial class Item : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ItemID;
		
		private System.Nullable<int> _VendorID;
		
		private System.Nullable<int> _CategoryID;
		
		private string _ItemName;
		
		private System.Nullable<System.DateTime> _MfgDate;
		
		private System.Nullable<System.DateTime> _ExpDate;
		
		private System.Nullable<double> _UnitPrice;
		
		private System.Nullable<double> _PurchasePrice;
		
		private string _Unit_of_Measure;
		
		private System.Nullable<int> _LeadTime;
		
		private EntityRef<Vendor> _Vendor;
		
		private EntityRef<Category> _Category;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnItemIDChanging(int value);
    partial void OnItemIDChanged();
    partial void OnVendorIDChanging(System.Nullable<int> value);
    partial void OnVendorIDChanged();
    partial void OnCategoryIDChanging(System.Nullable<int> value);
    partial void OnCategoryIDChanged();
    partial void OnItemNameChanging(string value);
    partial void OnItemNameChanged();
    partial void OnMfgDateChanging(System.Nullable<System.DateTime> value);
    partial void OnMfgDateChanged();
    partial void OnExpDateChanging(System.Nullable<System.DateTime> value);
    partial void OnExpDateChanged();
    partial void OnUnitPriceChanging(System.Nullable<double> value);
    partial void OnUnitPriceChanged();
    partial void OnPurchasePriceChanging(System.Nullable<double> value);
    partial void OnPurchasePriceChanged();
    partial void OnUnit_of_MeasureChanging(string value);
    partial void OnUnit_of_MeasureChanged();
    partial void OnLeadTimeChanging(System.Nullable<int> value);
    partial void OnLeadTimeChanged();
    #endregion
		
		public Item()
		{
			this._Vendor = default(EntityRef<Vendor>);
			this._Category = default(EntityRef<Category>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ItemID
		{
			get
			{
				return this._ItemID;
			}
			set
			{
				if ((this._ItemID != value))
				{
					this.OnItemIDChanging(value);
					this.SendPropertyChanging();
					this._ItemID = value;
					this.SendPropertyChanged("ItemID");
					this.OnItemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VendorID", DbType="Int")]
		public System.Nullable<int> VendorID
		{
			get
			{
				return this._VendorID;
			}
			set
			{
				if ((this._VendorID != value))
				{
					if (this._Vendor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVendorIDChanging(value);
					this.SendPropertyChanging();
					this._VendorID = value;
					this.SendPropertyChanged("VendorID");
					this.OnVendorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryID", DbType="Int")]
		public System.Nullable<int> CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemName", DbType="VarChar(MAX)")]
		public string ItemName
		{
			get
			{
				return this._ItemName;
			}
			set
			{
				if ((this._ItemName != value))
				{
					this.OnItemNameChanging(value);
					this.SendPropertyChanging();
					this._ItemName = value;
					this.SendPropertyChanged("ItemName");
					this.OnItemNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MfgDate", DbType="Date")]
		public System.Nullable<System.DateTime> MfgDate
		{
			get
			{
				return this._MfgDate;
			}
			set
			{
				if ((this._MfgDate != value))
				{
					this.OnMfgDateChanging(value);
					this.SendPropertyChanging();
					this._MfgDate = value;
					this.SendPropertyChanged("MfgDate");
					this.OnMfgDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpDate", DbType="Date")]
		public System.Nullable<System.DateTime> ExpDate
		{
			get
			{
				return this._ExpDate;
			}
			set
			{
				if ((this._ExpDate != value))
				{
					this.OnExpDateChanging(value);
					this.SendPropertyChanging();
					this._ExpDate = value;
					this.SendPropertyChanged("ExpDate");
					this.OnExpDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitPrice", DbType="Float")]
		public System.Nullable<double> UnitPrice
		{
			get
			{
				return this._UnitPrice;
			}
			set
			{
				if ((this._UnitPrice != value))
				{
					this.OnUnitPriceChanging(value);
					this.SendPropertyChanging();
					this._UnitPrice = value;
					this.SendPropertyChanged("UnitPrice");
					this.OnUnitPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PurchasePrice", DbType="Float")]
		public System.Nullable<double> PurchasePrice
		{
			get
			{
				return this._PurchasePrice;
			}
			set
			{
				if ((this._PurchasePrice != value))
				{
					this.OnPurchasePriceChanging(value);
					this.SendPropertyChanging();
					this._PurchasePrice = value;
					this.SendPropertyChanged("PurchasePrice");
					this.OnPurchasePriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Unit_of_Measure", DbType="VarChar(50)")]
		public string Unit_of_Measure
		{
			get
			{
				return this._Unit_of_Measure;
			}
			set
			{
				if ((this._Unit_of_Measure != value))
				{
					this.OnUnit_of_MeasureChanging(value);
					this.SendPropertyChanging();
					this._Unit_of_Measure = value;
					this.SendPropertyChanged("Unit_of_Measure");
					this.OnUnit_of_MeasureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeadTime", DbType="Int")]
		public System.Nullable<int> LeadTime
		{
			get
			{
				return this._LeadTime;
			}
			set
			{
				if ((this._LeadTime != value))
				{
					this.OnLeadTimeChanging(value);
					this.SendPropertyChanging();
					this._LeadTime = value;
					this.SendPropertyChanged("LeadTime");
					this.OnLeadTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Vendor_Item", Storage="_Vendor", ThisKey="VendorID", OtherKey="VendorID", IsForeignKey=true)]
		public Vendor Vendor
		{
			get
			{
				return this._Vendor.Entity;
			}
			set
			{
				Vendor previousValue = this._Vendor.Entity;
				if (((previousValue != value) 
							|| (this._Vendor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Vendor.Entity = null;
						previousValue.Items.Remove(this);
					}
					this._Vendor.Entity = value;
					if ((value != null))
					{
						value.Items.Add(this);
						this._VendorID = value.VendorID;
					}
					else
					{
						this._VendorID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Vendor");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Item", Storage="_Category", ThisKey="CategoryID", OtherKey="CategoryID", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.Items.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.Items.Add(this);
						this._CategoryID = value.CategoryID;
					}
					else
					{
						this._CategoryID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Vendor")]
	public partial class Vendor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VendorID;
		
		private string _VendorName;
		
		private string _VendorAddress;
		
		private string _VendorContact;
		
		private string _ZIPCode;
		
		private EntitySet<Item> _Items;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVendorIDChanging(int value);
    partial void OnVendorIDChanged();
    partial void OnVendorNameChanging(string value);
    partial void OnVendorNameChanged();
    partial void OnVendorAddressChanging(string value);
    partial void OnVendorAddressChanged();
    partial void OnVendorContactChanging(string value);
    partial void OnVendorContactChanged();
    partial void OnZIPCodeChanging(string value);
    partial void OnZIPCodeChanged();
    #endregion
		
		public Vendor()
		{
			this._Items = new EntitySet<Item>(new Action<Item>(this.attach_Items), new Action<Item>(this.detach_Items));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VendorID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int VendorID
		{
			get
			{
				return this._VendorID;
			}
			set
			{
				if ((this._VendorID != value))
				{
					this.OnVendorIDChanging(value);
					this.SendPropertyChanging();
					this._VendorID = value;
					this.SendPropertyChanged("VendorID");
					this.OnVendorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VendorName", DbType="VarChar(50)")]
		public string VendorName
		{
			get
			{
				return this._VendorName;
			}
			set
			{
				if ((this._VendorName != value))
				{
					this.OnVendorNameChanging(value);
					this.SendPropertyChanging();
					this._VendorName = value;
					this.SendPropertyChanged("VendorName");
					this.OnVendorNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VendorAddress", DbType="VarChar(MAX)")]
		public string VendorAddress
		{
			get
			{
				return this._VendorAddress;
			}
			set
			{
				if ((this._VendorAddress != value))
				{
					this.OnVendorAddressChanging(value);
					this.SendPropertyChanging();
					this._VendorAddress = value;
					this.SendPropertyChanged("VendorAddress");
					this.OnVendorAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VendorContact", DbType="VarChar(50)")]
		public string VendorContact
		{
			get
			{
				return this._VendorContact;
			}
			set
			{
				if ((this._VendorContact != value))
				{
					this.OnVendorContactChanging(value);
					this.SendPropertyChanging();
					this._VendorContact = value;
					this.SendPropertyChanged("VendorContact");
					this.OnVendorContactChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZIPCode", DbType="VarChar(50)")]
		public string ZIPCode
		{
			get
			{
				return this._ZIPCode;
			}
			set
			{
				if ((this._ZIPCode != value))
				{
					this.OnZIPCodeChanging(value);
					this.SendPropertyChanging();
					this._ZIPCode = value;
					this.SendPropertyChanged("ZIPCode");
					this.OnZIPCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Vendor_Item", Storage="_Items", ThisKey="VendorID", OtherKey="VendorID")]
		public EntitySet<Item> Items
		{
			get
			{
				return this._Items;
			}
			set
			{
				this._Items.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.Vendor = this;
		}
		
		private void detach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.Vendor = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Category")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CategoryID;
		
		private string _CategoryName;
		
		private EntitySet<Item> _Items;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategoryIDChanging(int value);
    partial void OnCategoryIDChanged();
    partial void OnCategoryNameChanging(string value);
    partial void OnCategoryNameChanged();
    #endregion
		
		public Category()
		{
			this._Items = new EntitySet<Item>(new Action<Item>(this.attach_Items), new Action<Item>(this.detach_Items));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryName", DbType="VarChar(50)")]
		public string CategoryName
		{
			get
			{
				return this._CategoryName;
			}
			set
			{
				if ((this._CategoryName != value))
				{
					this.OnCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._CategoryName = value;
					this.SendPropertyChanged("CategoryName");
					this.OnCategoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Item", Storage="_Items", ThisKey="CategoryID", OtherKey="CategoryID")]
		public EntitySet<Item> Items
		{
			get
			{
				return this._Items;
			}
			set
			{
				this._Items.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Order]")]
	public partial class Order : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OrderId;
		
		private string _VendorName;
		
		private System.Nullable<System.DateTime> _OrderDate;
		
		private string _TotalAmount;
		
		private string _OrderStatus;
		
		private string _Payment;
		
		private EntitySet<OrderDetail> _OrderDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderIdChanging(int value);
    partial void OnOrderIdChanged();
    partial void OnVendorNameChanging(string value);
    partial void OnVendorNameChanged();
    partial void OnOrderDateChanging(System.Nullable<System.DateTime> value);
    partial void OnOrderDateChanged();
    partial void OnTotalAmountChanging(string value);
    partial void OnTotalAmountChanged();
    partial void OnOrderStatusChanging(string value);
    partial void OnOrderStatusChanged();
    partial void OnPaymentChanging(string value);
    partial void OnPaymentChanged();
    #endregion
		
		public Order()
		{
			this._OrderDetails = new EntitySet<OrderDetail>(new Action<OrderDetail>(this.attach_OrderDetails), new Action<OrderDetail>(this.detach_OrderDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OrderId
		{
			get
			{
				return this._OrderId;
			}
			set
			{
				if ((this._OrderId != value))
				{
					this.OnOrderIdChanging(value);
					this.SendPropertyChanging();
					this._OrderId = value;
					this.SendPropertyChanged("OrderId");
					this.OnOrderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VendorName", DbType="VarChar(50)")]
		public string VendorName
		{
			get
			{
				return this._VendorName;
			}
			set
			{
				if ((this._VendorName != value))
				{
					this.OnVendorNameChanging(value);
					this.SendPropertyChanging();
					this._VendorName = value;
					this.SendPropertyChanged("VendorName");
					this.OnVendorNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> OrderDate
		{
			get
			{
				return this._OrderDate;
			}
			set
			{
				if ((this._OrderDate != value))
				{
					this.OnOrderDateChanging(value);
					this.SendPropertyChanging();
					this._OrderDate = value;
					this.SendPropertyChanged("OrderDate");
					this.OnOrderDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalAmount", DbType="VarChar(50)")]
		public string TotalAmount
		{
			get
			{
				return this._TotalAmount;
			}
			set
			{
				if ((this._TotalAmount != value))
				{
					this.OnTotalAmountChanging(value);
					this.SendPropertyChanging();
					this._TotalAmount = value;
					this.SendPropertyChanged("TotalAmount");
					this.OnTotalAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderStatus", DbType="VarChar(50)")]
		public string OrderStatus
		{
			get
			{
				return this._OrderStatus;
			}
			set
			{
				if ((this._OrderStatus != value))
				{
					this.OnOrderStatusChanging(value);
					this.SendPropertyChanging();
					this._OrderStatus = value;
					this.SendPropertyChanged("OrderStatus");
					this.OnOrderStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Payment", DbType="VarChar(20)")]
		public string Payment
		{
			get
			{
				return this._Payment;
			}
			set
			{
				if ((this._Payment != value))
				{
					this.OnPaymentChanging(value);
					this.SendPropertyChanging();
					this._Payment = value;
					this.SendPropertyChanged("Payment");
					this.OnPaymentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_OrderDetail", Storage="_OrderDetails", ThisKey="OrderId", OtherKey="OrderID")]
		public EntitySet<OrderDetail> OrderDetails
		{
			get
			{
				return this._OrderDetails;
			}
			set
			{
				this._OrderDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderDetails(OrderDetail entity)
		{
			this.SendPropertyChanging();
			entity.Order = this;
		}
		
		private void detach_OrderDetails(OrderDetail entity)
		{
			this.SendPropertyChanging();
			entity.Order = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderDetail")]
	public partial class OrderDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OrderDetailID;
		
		private System.Nullable<int> _OrderID;
		
		private System.Nullable<int> _ItemID;
		
		private System.Nullable<int> _VendorID;
		
		private string _ItemName;
		
		private string _VendorName;
		
		private string _Category;
		
		private System.Nullable<int> _Quantity;
		
		private System.Nullable<decimal> _Price;
		
		private System.Nullable<decimal> _TotalAmount;
		
		private EntityRef<Order> _Order;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderDetailIDChanging(int value);
    partial void OnOrderDetailIDChanged();
    partial void OnOrderIDChanging(System.Nullable<int> value);
    partial void OnOrderIDChanged();
    partial void OnItemIDChanging(System.Nullable<int> value);
    partial void OnItemIDChanged();
    partial void OnVendorIDChanging(System.Nullable<int> value);
    partial void OnVendorIDChanged();
    partial void OnItemNameChanging(string value);
    partial void OnItemNameChanged();
    partial void OnVendorNameChanging(string value);
    partial void OnVendorNameChanged();
    partial void OnCategoryChanging(string value);
    partial void OnCategoryChanged();
    partial void OnQuantityChanging(System.Nullable<int> value);
    partial void OnQuantityChanged();
    partial void OnPriceChanging(System.Nullable<decimal> value);
    partial void OnPriceChanged();
    partial void OnTotalAmountChanging(System.Nullable<decimal> value);
    partial void OnTotalAmountChanged();
    #endregion
		
		public OrderDetail()
		{
			this._Order = default(EntityRef<Order>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderDetailID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OrderDetailID
		{
			get
			{
				return this._OrderDetailID;
			}
			set
			{
				if ((this._OrderDetailID != value))
				{
					this.OnOrderDetailIDChanging(value);
					this.SendPropertyChanging();
					this._OrderDetailID = value;
					this.SendPropertyChanged("OrderDetailID");
					this.OnOrderDetailIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderID", DbType="Int")]
		public System.Nullable<int> OrderID
		{
			get
			{
				return this._OrderID;
			}
			set
			{
				if ((this._OrderID != value))
				{
					if (this._Order.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderIDChanging(value);
					this.SendPropertyChanging();
					this._OrderID = value;
					this.SendPropertyChanged("OrderID");
					this.OnOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemID", DbType="Int")]
		public System.Nullable<int> ItemID
		{
			get
			{
				return this._ItemID;
			}
			set
			{
				if ((this._ItemID != value))
				{
					this.OnItemIDChanging(value);
					this.SendPropertyChanging();
					this._ItemID = value;
					this.SendPropertyChanged("ItemID");
					this.OnItemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VendorID", DbType="Int")]
		public System.Nullable<int> VendorID
		{
			get
			{
				return this._VendorID;
			}
			set
			{
				if ((this._VendorID != value))
				{
					this.OnVendorIDChanging(value);
					this.SendPropertyChanging();
					this._VendorID = value;
					this.SendPropertyChanged("VendorID");
					this.OnVendorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemName", DbType="VarChar(20)")]
		public string ItemName
		{
			get
			{
				return this._ItemName;
			}
			set
			{
				if ((this._ItemName != value))
				{
					this.OnItemNameChanging(value);
					this.SendPropertyChanging();
					this._ItemName = value;
					this.SendPropertyChanged("ItemName");
					this.OnItemNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VendorName", DbType="VarChar(20)")]
		public string VendorName
		{
			get
			{
				return this._VendorName;
			}
			set
			{
				if ((this._VendorName != value))
				{
					this.OnVendorNameChanging(value);
					this.SendPropertyChanging();
					this._VendorName = value;
					this.SendPropertyChanged("VendorName");
					this.OnVendorNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Category", DbType="VarChar(20)")]
		public string Category
		{
			get
			{
				return this._Category;
			}
			set
			{
				if ((this._Category != value))
				{
					this.OnCategoryChanging(value);
					this.SendPropertyChanging();
					this._Category = value;
					this.SendPropertyChanged("Category");
					this.OnCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int")]
		public System.Nullable<int> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Decimal(12,2)")]
		public System.Nullable<decimal> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalAmount", DbType="Decimal(12,2)")]
		public System.Nullable<decimal> TotalAmount
		{
			get
			{
				return this._TotalAmount;
			}
			set
			{
				if ((this._TotalAmount != value))
				{
					this.OnTotalAmountChanging(value);
					this.SendPropertyChanging();
					this._TotalAmount = value;
					this.SendPropertyChanged("TotalAmount");
					this.OnTotalAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_OrderDetail", Storage="_Order", ThisKey="OrderID", OtherKey="OrderId", IsForeignKey=true)]
		public Order Order
		{
			get
			{
				return this._Order.Entity;
			}
			set
			{
				Order previousValue = this._Order.Entity;
				if (((previousValue != value) 
							|| (this._Order.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Order.Entity = null;
						previousValue.OrderDetails.Remove(this);
					}
					this._Order.Entity = value;
					if ((value != null))
					{
						value.OrderDetails.Add(this);
						this._OrderID = value.OrderId;
					}
					else
					{
						this._OrderID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Order");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Appointments")]
	public partial class Appointment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AppointmentID;
		
		private int _DoctorID;
		
		private int _PatientID;
		
		private System.Nullable<System.DateTime> _Date;
		
		private string _TimeSlot;
		
		private string _Description;
		
		private string _Status;
		
		private EntitySet<Invoice> _Invoices;
		
		private EntityRef<Patient> _Patient;
		
		private EntityRef<Doctor> _Doctor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAppointmentIDChanging(int value);
    partial void OnAppointmentIDChanged();
    partial void OnDoctorIDChanging(int value);
    partial void OnDoctorIDChanged();
    partial void OnPatientIDChanging(int value);
    partial void OnPatientIDChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnTimeSlotChanging(string value);
    partial void OnTimeSlotChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    #endregion
		
		public Appointment()
		{
			this._Invoices = new EntitySet<Invoice>(new Action<Invoice>(this.attach_Invoices), new Action<Invoice>(this.detach_Invoices));
			this._Patient = default(EntityRef<Patient>);
			this._Doctor = default(EntityRef<Doctor>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppointmentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AppointmentID
		{
			get
			{
				return this._AppointmentID;
			}
			set
			{
				if ((this._AppointmentID != value))
				{
					this.OnAppointmentIDChanging(value);
					this.SendPropertyChanging();
					this._AppointmentID = value;
					this.SendPropertyChanged("AppointmentID");
					this.OnAppointmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoctorID", DbType="Int NOT NULL")]
		public int DoctorID
		{
			get
			{
				return this._DoctorID;
			}
			set
			{
				if ((this._DoctorID != value))
				{
					if (this._Doctor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDoctorIDChanging(value);
					this.SendPropertyChanging();
					this._DoctorID = value;
					this.SendPropertyChanged("DoctorID");
					this.OnDoctorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientID", DbType="Int NOT NULL")]
		public int PatientID
		{
			get
			{
				return this._PatientID;
			}
			set
			{
				if ((this._PatientID != value))
				{
					if (this._Patient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPatientIDChanging(value);
					this.SendPropertyChanging();
					this._PatientID = value;
					this.SendPropertyChanged("PatientID");
					this.OnPatientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeSlot", DbType="VarChar(50)")]
		public string TimeSlot
		{
			get
			{
				return this._TimeSlot;
			}
			set
			{
				if ((this._TimeSlot != value))
				{
					this.OnTimeSlotChanging(value);
					this.SendPropertyChanging();
					this._TimeSlot = value;
					this.SendPropertyChanged("TimeSlot");
					this.OnTimeSlotChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(100)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="VarChar(15)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Appointment_Invoice", Storage="_Invoices", ThisKey="AppointmentID", OtherKey="AppointmentID")]
		public EntitySet<Invoice> Invoices
		{
			get
			{
				return this._Invoices;
			}
			set
			{
				this._Invoices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Appointment", Storage="_Patient", ThisKey="PatientID", OtherKey="PatientID", IsForeignKey=true)]
		public Patient Patient
		{
			get
			{
				return this._Patient.Entity;
			}
			set
			{
				Patient previousValue = this._Patient.Entity;
				if (((previousValue != value) 
							|| (this._Patient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Patient.Entity = null;
						previousValue.Appointments.Remove(this);
					}
					this._Patient.Entity = value;
					if ((value != null))
					{
						value.Appointments.Add(this);
						this._PatientID = value.PatientID;
					}
					else
					{
						this._PatientID = default(int);
					}
					this.SendPropertyChanged("Patient");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctor_Appointment", Storage="_Doctor", ThisKey="DoctorID", OtherKey="DoctorID", IsForeignKey=true)]
		public Doctor Doctor
		{
			get
			{
				return this._Doctor.Entity;
			}
			set
			{
				Doctor previousValue = this._Doctor.Entity;
				if (((previousValue != value) 
							|| (this._Doctor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Doctor.Entity = null;
						previousValue.Appointments.Remove(this);
					}
					this._Doctor.Entity = value;
					if ((value != null))
					{
						value.Appointments.Add(this);
						this._DoctorID = value.DoctorID;
					}
					else
					{
						this._DoctorID = default(int);
					}
					this.SendPropertyChanged("Doctor");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.Appointment = this;
		}
		
		private void detach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.Appointment = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Email;
		
		private string _UserName;
		
		private string _Password;
		
		private string _UserImage;
		
		private int _RoleID;
		
		private System.Nullable<int> _DoctorID;
		
		private EntityRef<Role> _Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnUserImageChanging(string value);
    partial void OnUserImageChanged();
    partial void OnRoleIDChanging(int value);
    partial void OnRoleIDChanged();
    partial void OnDoctorIDChanging(System.Nullable<int> value);
    partial void OnDoctorIDChanged();
    #endregion
		
		public User()
		{
			this._Role = default(EntityRef<Role>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(50)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(50)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="VarChar(50)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserImage", DbType="VarChar(MAX)")]
		public string UserImage
		{
			get
			{
				return this._UserImage;
			}
			set
			{
				if ((this._UserImage != value))
				{
					this.OnUserImageChanging(value);
					this.SendPropertyChanging();
					this._UserImage = value;
					this.SendPropertyChanged("UserImage");
					this.OnUserImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", DbType="Int NOT NULL")]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoctorID", DbType="Int")]
		public System.Nullable<int> DoctorID
		{
			get
			{
				return this._DoctorID;
			}
			set
			{
				if ((this._DoctorID != value))
				{
					this.OnDoctorIDChanging(value);
					this.SendPropertyChanging();
					this._DoctorID = value;
					this.SendPropertyChanged("DoctorID");
					this.OnDoctorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_User", Storage="_Role", ThisKey="RoleID", OtherKey="RoleID", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._RoleID = value.RoleID;
					}
					else
					{
						this._RoleID = default(int);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Prescription")]
	public partial class Prescription : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PrescriptionID;
		
		private System.Nullable<int> _DoctorID;
		
		private System.Nullable<int> _PatientID;
		
		private System.Nullable<int> _AppointmentID;
		
		private EntitySet<Medication> _Medications;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPrescriptionIDChanging(int value);
    partial void OnPrescriptionIDChanged();
    partial void OnDoctorIDChanging(System.Nullable<int> value);
    partial void OnDoctorIDChanged();
    partial void OnPatientIDChanging(System.Nullable<int> value);
    partial void OnPatientIDChanged();
    partial void OnAppointmentIDChanging(System.Nullable<int> value);
    partial void OnAppointmentIDChanged();
    #endregion
		
		public Prescription()
		{
			this._Medications = new EntitySet<Medication>(new Action<Medication>(this.attach_Medications), new Action<Medication>(this.detach_Medications));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrescriptionID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PrescriptionID
		{
			get
			{
				return this._PrescriptionID;
			}
			set
			{
				if ((this._PrescriptionID != value))
				{
					this.OnPrescriptionIDChanging(value);
					this.SendPropertyChanging();
					this._PrescriptionID = value;
					this.SendPropertyChanged("PrescriptionID");
					this.OnPrescriptionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoctorID", DbType="Int")]
		public System.Nullable<int> DoctorID
		{
			get
			{
				return this._DoctorID;
			}
			set
			{
				if ((this._DoctorID != value))
				{
					this.OnDoctorIDChanging(value);
					this.SendPropertyChanging();
					this._DoctorID = value;
					this.SendPropertyChanged("DoctorID");
					this.OnDoctorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientID", DbType="Int")]
		public System.Nullable<int> PatientID
		{
			get
			{
				return this._PatientID;
			}
			set
			{
				if ((this._PatientID != value))
				{
					this.OnPatientIDChanging(value);
					this.SendPropertyChanging();
					this._PatientID = value;
					this.SendPropertyChanged("PatientID");
					this.OnPatientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppointmentID", DbType="Int")]
		public System.Nullable<int> AppointmentID
		{
			get
			{
				return this._AppointmentID;
			}
			set
			{
				if ((this._AppointmentID != value))
				{
					this.OnAppointmentIDChanging(value);
					this.SendPropertyChanging();
					this._AppointmentID = value;
					this.SendPropertyChanged("AppointmentID");
					this.OnAppointmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Prescription_Medication", Storage="_Medications", ThisKey="PrescriptionID", OtherKey="PrescriptionID")]
		public EntitySet<Medication> Medications
		{
			get
			{
				return this._Medications;
			}
			set
			{
				this._Medications.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Medications(Medication entity)
		{
			this.SendPropertyChanging();
			entity.Prescription = this;
		}
		
		private void detach_Medications(Medication entity)
		{
			this.SendPropertyChanging();
			entity.Prescription = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Medication")]
	public partial class Medication : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MedicationID;
		
		private System.Nullable<int> _PrescriptionID;
		
		private string _MedType;
		
		private string _MedName;
		
		private string _Strength;
		
		private string _Duration;
		
		private string _Dose;
		
		private string _Dignosis;
		
		private EntityRef<Prescription> _Prescription;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMedicationIDChanging(int value);
    partial void OnMedicationIDChanged();
    partial void OnPrescriptionIDChanging(System.Nullable<int> value);
    partial void OnPrescriptionIDChanged();
    partial void OnMedTypeChanging(string value);
    partial void OnMedTypeChanged();
    partial void OnMedNameChanging(string value);
    partial void OnMedNameChanged();
    partial void OnStrengthChanging(string value);
    partial void OnStrengthChanged();
    partial void OnDurationChanging(string value);
    partial void OnDurationChanged();
    partial void OnDoseChanging(string value);
    partial void OnDoseChanged();
    partial void OnDignosisChanging(string value);
    partial void OnDignosisChanged();
    #endregion
		
		public Medication()
		{
			this._Prescription = default(EntityRef<Prescription>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedicationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MedicationID
		{
			get
			{
				return this._MedicationID;
			}
			set
			{
				if ((this._MedicationID != value))
				{
					this.OnMedicationIDChanging(value);
					this.SendPropertyChanging();
					this._MedicationID = value;
					this.SendPropertyChanged("MedicationID");
					this.OnMedicationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrescriptionID", DbType="Int")]
		public System.Nullable<int> PrescriptionID
		{
			get
			{
				return this._PrescriptionID;
			}
			set
			{
				if ((this._PrescriptionID != value))
				{
					if (this._Prescription.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPrescriptionIDChanging(value);
					this.SendPropertyChanging();
					this._PrescriptionID = value;
					this.SendPropertyChanged("PrescriptionID");
					this.OnPrescriptionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedType", DbType="VarChar(10)")]
		public string MedType
		{
			get
			{
				return this._MedType;
			}
			set
			{
				if ((this._MedType != value))
				{
					this.OnMedTypeChanging(value);
					this.SendPropertyChanging();
					this._MedType = value;
					this.SendPropertyChanged("MedType");
					this.OnMedTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedName", DbType="VarChar(50)")]
		public string MedName
		{
			get
			{
				return this._MedName;
			}
			set
			{
				if ((this._MedName != value))
				{
					this.OnMedNameChanging(value);
					this.SendPropertyChanging();
					this._MedName = value;
					this.SendPropertyChanged("MedName");
					this.OnMedNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Strength", DbType="VarChar(20)")]
		public string Strength
		{
			get
			{
				return this._Strength;
			}
			set
			{
				if ((this._Strength != value))
				{
					this.OnStrengthChanging(value);
					this.SendPropertyChanging();
					this._Strength = value;
					this.SendPropertyChanged("Strength");
					this.OnStrengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Duration", DbType="VarChar(20)")]
		public string Duration
		{
			get
			{
				return this._Duration;
			}
			set
			{
				if ((this._Duration != value))
				{
					this.OnDurationChanging(value);
					this.SendPropertyChanging();
					this._Duration = value;
					this.SendPropertyChanged("Duration");
					this.OnDurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Dose", DbType="VarChar(20)")]
		public string Dose
		{
			get
			{
				return this._Dose;
			}
			set
			{
				if ((this._Dose != value))
				{
					this.OnDoseChanging(value);
					this.SendPropertyChanging();
					this._Dose = value;
					this.SendPropertyChanged("Dose");
					this.OnDoseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Dignosis", DbType="VarChar(MAX)")]
		public string Dignosis
		{
			get
			{
				return this._Dignosis;
			}
			set
			{
				if ((this._Dignosis != value))
				{
					this.OnDignosisChanging(value);
					this.SendPropertyChanging();
					this._Dignosis = value;
					this.SendPropertyChanged("Dignosis");
					this.OnDignosisChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Prescription_Medication", Storage="_Prescription", ThisKey="PrescriptionID", OtherKey="PrescriptionID", IsForeignKey=true)]
		public Prescription Prescription
		{
			get
			{
				return this._Prescription.Entity;
			}
			set
			{
				Prescription previousValue = this._Prescription.Entity;
				if (((previousValue != value) 
							|| (this._Prescription.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Prescription.Entity = null;
						previousValue.Medications.Remove(this);
					}
					this._Prescription.Entity = value;
					if ((value != null))
					{
						value.Medications.Add(this);
						this._PrescriptionID = value.PrescriptionID;
					}
					else
					{
						this._PrescriptionID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Prescription");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Doctor")]
	public partial class Doctor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DoctorID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _DoctorEmail;
		
		private string _Department;
		
		private string _Designation;
		
		private string _Image;
		
		private EntitySet<DoctorSchedule> _DoctorSchedules;
		
		private EntitySet<Appointment> _Appointments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDoctorIDChanging(int value);
    partial void OnDoctorIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnDoctorEmailChanging(string value);
    partial void OnDoctorEmailChanged();
    partial void OnDepartmentChanging(string value);
    partial void OnDepartmentChanged();
    partial void OnDesignationChanging(string value);
    partial void OnDesignationChanged();
    partial void OnImageChanging(string value);
    partial void OnImageChanged();
    #endregion
		
		public Doctor()
		{
			this._DoctorSchedules = new EntitySet<DoctorSchedule>(new Action<DoctorSchedule>(this.attach_DoctorSchedules), new Action<DoctorSchedule>(this.detach_DoctorSchedules));
			this._Appointments = new EntitySet<Appointment>(new Action<Appointment>(this.attach_Appointments), new Action<Appointment>(this.detach_Appointments));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoctorID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DoctorID
		{
			get
			{
				return this._DoctorID;
			}
			set
			{
				if ((this._DoctorID != value))
				{
					this.OnDoctorIDChanging(value);
					this.SendPropertyChanging();
					this._DoctorID = value;
					this.SendPropertyChanged("DoctorID");
					this.OnDoctorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoctorEmail", DbType="VarChar(50)")]
		public string DoctorEmail
		{
			get
			{
				return this._DoctorEmail;
			}
			set
			{
				if ((this._DoctorEmail != value))
				{
					this.OnDoctorEmailChanging(value);
					this.SendPropertyChanging();
					this._DoctorEmail = value;
					this.SendPropertyChanged("DoctorEmail");
					this.OnDoctorEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Department", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Department
		{
			get
			{
				return this._Department;
			}
			set
			{
				if ((this._Department != value))
				{
					this.OnDepartmentChanging(value);
					this.SendPropertyChanging();
					this._Department = value;
					this.SendPropertyChanged("Department");
					this.OnDepartmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Designation", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Designation
		{
			get
			{
				return this._Designation;
			}
			set
			{
				if ((this._Designation != value))
				{
					this.OnDesignationChanging(value);
					this.SendPropertyChanging();
					this._Designation = value;
					this.SendPropertyChanged("Designation");
					this.OnDesignationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this.OnImageChanging(value);
					this.SendPropertyChanging();
					this._Image = value;
					this.SendPropertyChanged("Image");
					this.OnImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctor_DoctorSchedule", Storage="_DoctorSchedules", ThisKey="DoctorID", OtherKey="DoctorID")]
		public EntitySet<DoctorSchedule> DoctorSchedules
		{
			get
			{
				return this._DoctorSchedules;
			}
			set
			{
				this._DoctorSchedules.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctor_Appointment", Storage="_Appointments", ThisKey="DoctorID", OtherKey="DoctorID")]
		public EntitySet<Appointment> Appointments
		{
			get
			{
				return this._Appointments;
			}
			set
			{
				this._Appointments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DoctorSchedules(DoctorSchedule entity)
		{
			this.SendPropertyChanging();
			entity.Doctor = this;
		}
		
		private void detach_DoctorSchedules(DoctorSchedule entity)
		{
			this.SendPropertyChanging();
			entity.Doctor = null;
		}
		
		private void attach_Appointments(Appointment entity)
		{
			this.SendPropertyChanging();
			entity.Doctor = this;
		}
		
		private void detach_Appointments(Appointment entity)
		{
			this.SendPropertyChanging();
			entity.Doctor = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InvoiceDetail")]
	public partial class InvoiceDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _InvoiceDetailID;
		
		private System.Nullable<int> _InvoiceID;
		
		private System.Nullable<int> _ItemID;
		
		private string _ItemName;
		
		private string _Category;
		
		private System.Nullable<int> _Quantity;
		
		private System.Nullable<decimal> _Price;
		
		private System.Nullable<decimal> _TotalAmount;
		
		private EntityRef<Invoice> _Invoice;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInvoiceDetailIDChanging(int value);
    partial void OnInvoiceDetailIDChanged();
    partial void OnInvoiceIDChanging(System.Nullable<int> value);
    partial void OnInvoiceIDChanged();
    partial void OnItemIDChanging(System.Nullable<int> value);
    partial void OnItemIDChanged();
    partial void OnItemNameChanging(string value);
    partial void OnItemNameChanged();
    partial void OnCategoryChanging(string value);
    partial void OnCategoryChanged();
    partial void OnQuantityChanging(System.Nullable<int> value);
    partial void OnQuantityChanged();
    partial void OnPriceChanging(System.Nullable<decimal> value);
    partial void OnPriceChanged();
    partial void OnTotalAmountChanging(System.Nullable<decimal> value);
    partial void OnTotalAmountChanged();
    #endregion
		
		public InvoiceDetail()
		{
			this._Invoice = default(EntityRef<Invoice>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceDetailID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int InvoiceDetailID
		{
			get
			{
				return this._InvoiceDetailID;
			}
			set
			{
				if ((this._InvoiceDetailID != value))
				{
					this.OnInvoiceDetailIDChanging(value);
					this.SendPropertyChanging();
					this._InvoiceDetailID = value;
					this.SendPropertyChanged("InvoiceDetailID");
					this.OnInvoiceDetailIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceID", DbType="Int")]
		public System.Nullable<int> InvoiceID
		{
			get
			{
				return this._InvoiceID;
			}
			set
			{
				if ((this._InvoiceID != value))
				{
					if (this._Invoice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInvoiceIDChanging(value);
					this.SendPropertyChanging();
					this._InvoiceID = value;
					this.SendPropertyChanged("InvoiceID");
					this.OnInvoiceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemID", DbType="Int")]
		public System.Nullable<int> ItemID
		{
			get
			{
				return this._ItemID;
			}
			set
			{
				if ((this._ItemID != value))
				{
					this.OnItemIDChanging(value);
					this.SendPropertyChanging();
					this._ItemID = value;
					this.SendPropertyChanged("ItemID");
					this.OnItemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemName", DbType="VarChar(20)")]
		public string ItemName
		{
			get
			{
				return this._ItemName;
			}
			set
			{
				if ((this._ItemName != value))
				{
					this.OnItemNameChanging(value);
					this.SendPropertyChanging();
					this._ItemName = value;
					this.SendPropertyChanged("ItemName");
					this.OnItemNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Category", DbType="VarChar(20)")]
		public string Category
		{
			get
			{
				return this._Category;
			}
			set
			{
				if ((this._Category != value))
				{
					this.OnCategoryChanging(value);
					this.SendPropertyChanging();
					this._Category = value;
					this.SendPropertyChanged("Category");
					this.OnCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int")]
		public System.Nullable<int> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Decimal(12,2)")]
		public System.Nullable<decimal> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalAmount", DbType="Decimal(12,2)")]
		public System.Nullable<decimal> TotalAmount
		{
			get
			{
				return this._TotalAmount;
			}
			set
			{
				if ((this._TotalAmount != value))
				{
					this.OnTotalAmountChanging(value);
					this.SendPropertyChanging();
					this._TotalAmount = value;
					this.SendPropertyChanged("TotalAmount");
					this.OnTotalAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Invoice_InvoiceDetail", Storage="_Invoice", ThisKey="InvoiceID", OtherKey="InvoiceID", IsForeignKey=true)]
		public Invoice Invoice
		{
			get
			{
				return this._Invoice.Entity;
			}
			set
			{
				Invoice previousValue = this._Invoice.Entity;
				if (((previousValue != value) 
							|| (this._Invoice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Invoice.Entity = null;
						previousValue.InvoiceDetails.Remove(this);
					}
					this._Invoice.Entity = value;
					if ((value != null))
					{
						value.InvoiceDetails.Add(this);
						this._InvoiceID = value.InvoiceID;
					}
					else
					{
						this._InvoiceID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Invoice");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Stock")]
	public partial class Stock : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StockID;
		
		private System.Nullable<int> _ItemID;
		
		private System.Nullable<int> _VendorID;
		
		private System.Nullable<int> _CategoryID;
		
		private string _ItemName;
		
		private System.Nullable<int> _Quantity;
		
		private string _MfgDate;
		
		private string _ExpDate;
		
		private System.Nullable<double> _UnitPrice;
		
		private System.Nullable<double> _PurchasePrice;
		
		private string _Unit_of_Measure;
		
		private System.Nullable<int> _LeadTime;
		
		private string _AddedMonth;
		
		private string _AddedYear;
		
		private string _AddedDay;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStockIDChanging(int value);
    partial void OnStockIDChanged();
    partial void OnItemIDChanging(System.Nullable<int> value);
    partial void OnItemIDChanged();
    partial void OnVendorIDChanging(System.Nullable<int> value);
    partial void OnVendorIDChanged();
    partial void OnCategoryIDChanging(System.Nullable<int> value);
    partial void OnCategoryIDChanged();
    partial void OnItemNameChanging(string value);
    partial void OnItemNameChanged();
    partial void OnQuantityChanging(System.Nullable<int> value);
    partial void OnQuantityChanged();
    partial void OnMfgDateChanging(string value);
    partial void OnMfgDateChanged();
    partial void OnExpDateChanging(string value);
    partial void OnExpDateChanged();
    partial void OnUnitPriceChanging(System.Nullable<double> value);
    partial void OnUnitPriceChanged();
    partial void OnPurchasePriceChanging(System.Nullable<double> value);
    partial void OnPurchasePriceChanged();
    partial void OnUnit_of_MeasureChanging(string value);
    partial void OnUnit_of_MeasureChanged();
    partial void OnLeadTimeChanging(System.Nullable<int> value);
    partial void OnLeadTimeChanged();
    partial void OnAddedMonthChanging(string value);
    partial void OnAddedMonthChanged();
    partial void OnAddedYearChanging(string value);
    partial void OnAddedYearChanged();
    partial void OnAddedDayChanging(string value);
    partial void OnAddedDayChanged();
    #endregion
		
		public Stock()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StockID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StockID
		{
			get
			{
				return this._StockID;
			}
			set
			{
				if ((this._StockID != value))
				{
					this.OnStockIDChanging(value);
					this.SendPropertyChanging();
					this._StockID = value;
					this.SendPropertyChanged("StockID");
					this.OnStockIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemID", DbType="Int")]
		public System.Nullable<int> ItemID
		{
			get
			{
				return this._ItemID;
			}
			set
			{
				if ((this._ItemID != value))
				{
					this.OnItemIDChanging(value);
					this.SendPropertyChanging();
					this._ItemID = value;
					this.SendPropertyChanged("ItemID");
					this.OnItemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VendorID", DbType="Int")]
		public System.Nullable<int> VendorID
		{
			get
			{
				return this._VendorID;
			}
			set
			{
				if ((this._VendorID != value))
				{
					this.OnVendorIDChanging(value);
					this.SendPropertyChanging();
					this._VendorID = value;
					this.SendPropertyChanged("VendorID");
					this.OnVendorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryID", DbType="Int")]
		public System.Nullable<int> CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemName", DbType="VarChar(MAX)")]
		public string ItemName
		{
			get
			{
				return this._ItemName;
			}
			set
			{
				if ((this._ItemName != value))
				{
					this.OnItemNameChanging(value);
					this.SendPropertyChanging();
					this._ItemName = value;
					this.SendPropertyChanged("ItemName");
					this.OnItemNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int")]
		public System.Nullable<int> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MfgDate", DbType="VarChar(MAX)")]
		public string MfgDate
		{
			get
			{
				return this._MfgDate;
			}
			set
			{
				if ((this._MfgDate != value))
				{
					this.OnMfgDateChanging(value);
					this.SendPropertyChanging();
					this._MfgDate = value;
					this.SendPropertyChanged("MfgDate");
					this.OnMfgDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpDate", DbType="VarChar(MAX)")]
		public string ExpDate
		{
			get
			{
				return this._ExpDate;
			}
			set
			{
				if ((this._ExpDate != value))
				{
					this.OnExpDateChanging(value);
					this.SendPropertyChanging();
					this._ExpDate = value;
					this.SendPropertyChanged("ExpDate");
					this.OnExpDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitPrice", DbType="Float")]
		public System.Nullable<double> UnitPrice
		{
			get
			{
				return this._UnitPrice;
			}
			set
			{
				if ((this._UnitPrice != value))
				{
					this.OnUnitPriceChanging(value);
					this.SendPropertyChanging();
					this._UnitPrice = value;
					this.SendPropertyChanged("UnitPrice");
					this.OnUnitPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PurchasePrice", DbType="Float")]
		public System.Nullable<double> PurchasePrice
		{
			get
			{
				return this._PurchasePrice;
			}
			set
			{
				if ((this._PurchasePrice != value))
				{
					this.OnPurchasePriceChanging(value);
					this.SendPropertyChanging();
					this._PurchasePrice = value;
					this.SendPropertyChanged("PurchasePrice");
					this.OnPurchasePriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Unit_of_Measure", DbType="VarChar(50)")]
		public string Unit_of_Measure
		{
			get
			{
				return this._Unit_of_Measure;
			}
			set
			{
				if ((this._Unit_of_Measure != value))
				{
					this.OnUnit_of_MeasureChanging(value);
					this.SendPropertyChanging();
					this._Unit_of_Measure = value;
					this.SendPropertyChanged("Unit_of_Measure");
					this.OnUnit_of_MeasureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeadTime", DbType="Int")]
		public System.Nullable<int> LeadTime
		{
			get
			{
				return this._LeadTime;
			}
			set
			{
				if ((this._LeadTime != value))
				{
					this.OnLeadTimeChanging(value);
					this.SendPropertyChanging();
					this._LeadTime = value;
					this.SendPropertyChanged("LeadTime");
					this.OnLeadTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedMonth", DbType="VarChar(10)")]
		public string AddedMonth
		{
			get
			{
				return this._AddedMonth;
			}
			set
			{
				if ((this._AddedMonth != value))
				{
					this.OnAddedMonthChanging(value);
					this.SendPropertyChanging();
					this._AddedMonth = value;
					this.SendPropertyChanged("AddedMonth");
					this.OnAddedMonthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedYear", DbType="VarChar(10)")]
		public string AddedYear
		{
			get
			{
				return this._AddedYear;
			}
			set
			{
				if ((this._AddedYear != value))
				{
					this.OnAddedYearChanging(value);
					this.SendPropertyChanging();
					this._AddedYear = value;
					this.SendPropertyChanged("AddedYear");
					this.OnAddedYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDay", DbType="VarChar(10)")]
		public string AddedDay
		{
			get
			{
				return this._AddedDay;
			}
			set
			{
				if ((this._AddedDay != value))
				{
					this.OnAddedDayChanging(value);
					this.SendPropertyChanging();
					this._AddedDay = value;
					this.SendPropertyChanged("AddedDay");
					this.OnAddedDayChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Request")]
	public partial class Request : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RequestID;
		
		private string _ReqText;
		
		private string _Status;
		
		private string _AddedMonth;
		
		private string _AddedYear;
		
		private string _AddedDay;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRequestIDChanging(int value);
    partial void OnRequestIDChanged();
    partial void OnReqTextChanging(string value);
    partial void OnReqTextChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnAddedMonthChanging(string value);
    partial void OnAddedMonthChanged();
    partial void OnAddedYearChanging(string value);
    partial void OnAddedYearChanged();
    partial void OnAddedDayChanging(string value);
    partial void OnAddedDayChanged();
    #endregion
		
		public Request()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RequestID
		{
			get
			{
				return this._RequestID;
			}
			set
			{
				if ((this._RequestID != value))
				{
					this.OnRequestIDChanging(value);
					this.SendPropertyChanging();
					this._RequestID = value;
					this.SendPropertyChanged("RequestID");
					this.OnRequestIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReqText", DbType="VarChar(MAX)")]
		public string ReqText
		{
			get
			{
				return this._ReqText;
			}
			set
			{
				if ((this._ReqText != value))
				{
					this.OnReqTextChanging(value);
					this.SendPropertyChanging();
					this._ReqText = value;
					this.SendPropertyChanged("ReqText");
					this.OnReqTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="VarChar(10)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedMonth", DbType="VarChar(10)")]
		public string AddedMonth
		{
			get
			{
				return this._AddedMonth;
			}
			set
			{
				if ((this._AddedMonth != value))
				{
					this.OnAddedMonthChanging(value);
					this.SendPropertyChanging();
					this._AddedMonth = value;
					this.SendPropertyChanged("AddedMonth");
					this.OnAddedMonthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedYear", DbType="VarChar(10)")]
		public string AddedYear
		{
			get
			{
				return this._AddedYear;
			}
			set
			{
				if ((this._AddedYear != value))
				{
					this.OnAddedYearChanging(value);
					this.SendPropertyChanging();
					this._AddedYear = value;
					this.SendPropertyChanged("AddedYear");
					this.OnAddedYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDay", DbType="VarChar(10)")]
		public string AddedDay
		{
			get
			{
				return this._AddedDay;
			}
			set
			{
				if ((this._AddedDay != value))
				{
					this.OnAddedDayChanging(value);
					this.SendPropertyChanging();
					this._AddedDay = value;
					this.SendPropertyChanged("AddedDay");
					this.OnAddedDayChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StockIn")]
	public partial class StockIn : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StockInID;
		
		private System.Nullable<int> _StockID;
		
		private string _StockName;
		
		private System.Nullable<int> _StockQuantity;
		
		private System.Nullable<decimal> _PurchasedCost;
		
		private string _AddedDay;
		
		private string _AddedMonth;
		
		private string _AddedYear;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStockInIDChanging(int value);
    partial void OnStockInIDChanged();
    partial void OnStockIDChanging(System.Nullable<int> value);
    partial void OnStockIDChanged();
    partial void OnStockNameChanging(string value);
    partial void OnStockNameChanged();
    partial void OnStockQuantityChanging(System.Nullable<int> value);
    partial void OnStockQuantityChanged();
    partial void OnPurchasedCostChanging(System.Nullable<decimal> value);
    partial void OnPurchasedCostChanged();
    partial void OnAddedDayChanging(string value);
    partial void OnAddedDayChanged();
    partial void OnAddedMonthChanging(string value);
    partial void OnAddedMonthChanged();
    partial void OnAddedYearChanging(string value);
    partial void OnAddedYearChanged();
    #endregion
		
		public StockIn()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StockInID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StockInID
		{
			get
			{
				return this._StockInID;
			}
			set
			{
				if ((this._StockInID != value))
				{
					this.OnStockInIDChanging(value);
					this.SendPropertyChanging();
					this._StockInID = value;
					this.SendPropertyChanged("StockInID");
					this.OnStockInIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StockID", DbType="Int")]
		public System.Nullable<int> StockID
		{
			get
			{
				return this._StockID;
			}
			set
			{
				if ((this._StockID != value))
				{
					this.OnStockIDChanging(value);
					this.SendPropertyChanging();
					this._StockID = value;
					this.SendPropertyChanged("StockID");
					this.OnStockIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StockName", DbType="VarChar(50)")]
		public string StockName
		{
			get
			{
				return this._StockName;
			}
			set
			{
				if ((this._StockName != value))
				{
					this.OnStockNameChanging(value);
					this.SendPropertyChanging();
					this._StockName = value;
					this.SendPropertyChanged("StockName");
					this.OnStockNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StockQuantity", DbType="Int")]
		public System.Nullable<int> StockQuantity
		{
			get
			{
				return this._StockQuantity;
			}
			set
			{
				if ((this._StockQuantity != value))
				{
					this.OnStockQuantityChanging(value);
					this.SendPropertyChanging();
					this._StockQuantity = value;
					this.SendPropertyChanged("StockQuantity");
					this.OnStockQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PurchasedCost", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> PurchasedCost
		{
			get
			{
				return this._PurchasedCost;
			}
			set
			{
				if ((this._PurchasedCost != value))
				{
					this.OnPurchasedCostChanging(value);
					this.SendPropertyChanging();
					this._PurchasedCost = value;
					this.SendPropertyChanged("PurchasedCost");
					this.OnPurchasedCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDay", DbType="VarChar(10)")]
		public string AddedDay
		{
			get
			{
				return this._AddedDay;
			}
			set
			{
				if ((this._AddedDay != value))
				{
					this.OnAddedDayChanging(value);
					this.SendPropertyChanging();
					this._AddedDay = value;
					this.SendPropertyChanged("AddedDay");
					this.OnAddedDayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedMonth", DbType="VarChar(10)")]
		public string AddedMonth
		{
			get
			{
				return this._AddedMonth;
			}
			set
			{
				if ((this._AddedMonth != value))
				{
					this.OnAddedMonthChanging(value);
					this.SendPropertyChanging();
					this._AddedMonth = value;
					this.SendPropertyChanged("AddedMonth");
					this.OnAddedMonthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedYear", DbType="VarChar(10)")]
		public string AddedYear
		{
			get
			{
				return this._AddedYear;
			}
			set
			{
				if ((this._AddedYear != value))
				{
					this.OnAddedYearChanging(value);
					this.SendPropertyChanging();
					this._AddedYear = value;
					this.SendPropertyChanged("AddedYear");
					this.OnAddedYearChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StockOut")]
	public partial class StockOut : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StockOutID;
		
		private System.Nullable<int> _StockID;
		
		private string _StockName;
		
		private System.Nullable<int> _StockQuantity;
		
		private System.Nullable<decimal> _StockRevenue;
		
		private string _AddedDay;
		
		private string _AddedMonth;
		
		private string _AddedYear;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStockOutIDChanging(int value);
    partial void OnStockOutIDChanged();
    partial void OnStockIDChanging(System.Nullable<int> value);
    partial void OnStockIDChanged();
    partial void OnStockNameChanging(string value);
    partial void OnStockNameChanged();
    partial void OnStockQuantityChanging(System.Nullable<int> value);
    partial void OnStockQuantityChanged();
    partial void OnStockRevenueChanging(System.Nullable<decimal> value);
    partial void OnStockRevenueChanged();
    partial void OnAddedDayChanging(string value);
    partial void OnAddedDayChanged();
    partial void OnAddedMonthChanging(string value);
    partial void OnAddedMonthChanged();
    partial void OnAddedYearChanging(string value);
    partial void OnAddedYearChanged();
    #endregion
		
		public StockOut()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StockOutID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StockOutID
		{
			get
			{
				return this._StockOutID;
			}
			set
			{
				if ((this._StockOutID != value))
				{
					this.OnStockOutIDChanging(value);
					this.SendPropertyChanging();
					this._StockOutID = value;
					this.SendPropertyChanged("StockOutID");
					this.OnStockOutIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StockID", DbType="Int")]
		public System.Nullable<int> StockID
		{
			get
			{
				return this._StockID;
			}
			set
			{
				if ((this._StockID != value))
				{
					this.OnStockIDChanging(value);
					this.SendPropertyChanging();
					this._StockID = value;
					this.SendPropertyChanged("StockID");
					this.OnStockIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StockName", DbType="VarChar(50)")]
		public string StockName
		{
			get
			{
				return this._StockName;
			}
			set
			{
				if ((this._StockName != value))
				{
					this.OnStockNameChanging(value);
					this.SendPropertyChanging();
					this._StockName = value;
					this.SendPropertyChanged("StockName");
					this.OnStockNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StockQuantity", DbType="Int")]
		public System.Nullable<int> StockQuantity
		{
			get
			{
				return this._StockQuantity;
			}
			set
			{
				if ((this._StockQuantity != value))
				{
					this.OnStockQuantityChanging(value);
					this.SendPropertyChanging();
					this._StockQuantity = value;
					this.SendPropertyChanged("StockQuantity");
					this.OnStockQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StockRevenue", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> StockRevenue
		{
			get
			{
				return this._StockRevenue;
			}
			set
			{
				if ((this._StockRevenue != value))
				{
					this.OnStockRevenueChanging(value);
					this.SendPropertyChanging();
					this._StockRevenue = value;
					this.SendPropertyChanged("StockRevenue");
					this.OnStockRevenueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDay", DbType="VarChar(10)")]
		public string AddedDay
		{
			get
			{
				return this._AddedDay;
			}
			set
			{
				if ((this._AddedDay != value))
				{
					this.OnAddedDayChanging(value);
					this.SendPropertyChanging();
					this._AddedDay = value;
					this.SendPropertyChanged("AddedDay");
					this.OnAddedDayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedMonth", DbType="VarChar(10)")]
		public string AddedMonth
		{
			get
			{
				return this._AddedMonth;
			}
			set
			{
				if ((this._AddedMonth != value))
				{
					this.OnAddedMonthChanging(value);
					this.SendPropertyChanging();
					this._AddedMonth = value;
					this.SendPropertyChanged("AddedMonth");
					this.OnAddedMonthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedYear", DbType="VarChar(10)")]
		public string AddedYear
		{
			get
			{
				return this._AddedYear;
			}
			set
			{
				if ((this._AddedYear != value))
				{
					this.OnAddedYearChanging(value);
					this.SendPropertyChanging();
					this._AddedYear = value;
					this.SendPropertyChanged("AddedYear");
					this.OnAddedYearChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Invoice")]
	public partial class Invoice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _InvoiceID;
		
		private System.Nullable<int> _AppointmentID;
		
		private System.Nullable<System.DateTime> _InvoiceDate;
		
		private string _TotalAmount;
		
		private string _InvoiceStatus;
		
		private string _Payment;
		
		private string _AddedMonth;
		
		private string _AddedYear;
		
		private string _AddedDay;
		
		private EntitySet<InvoiceDetail> _InvoiceDetails;
		
		private EntityRef<Appointment> _Appointment;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInvoiceIDChanging(int value);
    partial void OnInvoiceIDChanged();
    partial void OnAppointmentIDChanging(System.Nullable<int> value);
    partial void OnAppointmentIDChanged();
    partial void OnInvoiceDateChanging(System.Nullable<System.DateTime> value);
    partial void OnInvoiceDateChanged();
    partial void OnTotalAmountChanging(string value);
    partial void OnTotalAmountChanged();
    partial void OnInvoiceStatusChanging(string value);
    partial void OnInvoiceStatusChanged();
    partial void OnPaymentChanging(string value);
    partial void OnPaymentChanged();
    partial void OnAddedMonthChanging(string value);
    partial void OnAddedMonthChanged();
    partial void OnAddedYearChanging(string value);
    partial void OnAddedYearChanged();
    partial void OnAddedDayChanging(string value);
    partial void OnAddedDayChanged();
    #endregion
		
		public Invoice()
		{
			this._InvoiceDetails = new EntitySet<InvoiceDetail>(new Action<InvoiceDetail>(this.attach_InvoiceDetails), new Action<InvoiceDetail>(this.detach_InvoiceDetails));
			this._Appointment = default(EntityRef<Appointment>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int InvoiceID
		{
			get
			{
				return this._InvoiceID;
			}
			set
			{
				if ((this._InvoiceID != value))
				{
					this.OnInvoiceIDChanging(value);
					this.SendPropertyChanging();
					this._InvoiceID = value;
					this.SendPropertyChanged("InvoiceID");
					this.OnInvoiceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppointmentID", DbType="Int")]
		public System.Nullable<int> AppointmentID
		{
			get
			{
				return this._AppointmentID;
			}
			set
			{
				if ((this._AppointmentID != value))
				{
					if (this._Appointment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAppointmentIDChanging(value);
					this.SendPropertyChanging();
					this._AppointmentID = value;
					this.SendPropertyChanged("AppointmentID");
					this.OnAppointmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> InvoiceDate
		{
			get
			{
				return this._InvoiceDate;
			}
			set
			{
				if ((this._InvoiceDate != value))
				{
					this.OnInvoiceDateChanging(value);
					this.SendPropertyChanging();
					this._InvoiceDate = value;
					this.SendPropertyChanged("InvoiceDate");
					this.OnInvoiceDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalAmount", DbType="VarChar(50)")]
		public string TotalAmount
		{
			get
			{
				return this._TotalAmount;
			}
			set
			{
				if ((this._TotalAmount != value))
				{
					this.OnTotalAmountChanging(value);
					this.SendPropertyChanging();
					this._TotalAmount = value;
					this.SendPropertyChanged("TotalAmount");
					this.OnTotalAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceStatus", DbType="VarChar(50)")]
		public string InvoiceStatus
		{
			get
			{
				return this._InvoiceStatus;
			}
			set
			{
				if ((this._InvoiceStatus != value))
				{
					this.OnInvoiceStatusChanging(value);
					this.SendPropertyChanging();
					this._InvoiceStatus = value;
					this.SendPropertyChanged("InvoiceStatus");
					this.OnInvoiceStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Payment", DbType="VarChar(20)")]
		public string Payment
		{
			get
			{
				return this._Payment;
			}
			set
			{
				if ((this._Payment != value))
				{
					this.OnPaymentChanging(value);
					this.SendPropertyChanging();
					this._Payment = value;
					this.SendPropertyChanged("Payment");
					this.OnPaymentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedMonth", DbType="VarChar(10)")]
		public string AddedMonth
		{
			get
			{
				return this._AddedMonth;
			}
			set
			{
				if ((this._AddedMonth != value))
				{
					this.OnAddedMonthChanging(value);
					this.SendPropertyChanging();
					this._AddedMonth = value;
					this.SendPropertyChanged("AddedMonth");
					this.OnAddedMonthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedYear", DbType="VarChar(10)")]
		public string AddedYear
		{
			get
			{
				return this._AddedYear;
			}
			set
			{
				if ((this._AddedYear != value))
				{
					this.OnAddedYearChanging(value);
					this.SendPropertyChanging();
					this._AddedYear = value;
					this.SendPropertyChanged("AddedYear");
					this.OnAddedYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDay", DbType="VarChar(10)")]
		public string AddedDay
		{
			get
			{
				return this._AddedDay;
			}
			set
			{
				if ((this._AddedDay != value))
				{
					this.OnAddedDayChanging(value);
					this.SendPropertyChanging();
					this._AddedDay = value;
					this.SendPropertyChanged("AddedDay");
					this.OnAddedDayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Invoice_InvoiceDetail", Storage="_InvoiceDetails", ThisKey="InvoiceID", OtherKey="InvoiceID")]
		public EntitySet<InvoiceDetail> InvoiceDetails
		{
			get
			{
				return this._InvoiceDetails;
			}
			set
			{
				this._InvoiceDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Appointment_Invoice", Storage="_Appointment", ThisKey="AppointmentID", OtherKey="AppointmentID", IsForeignKey=true)]
		public Appointment Appointment
		{
			get
			{
				return this._Appointment.Entity;
			}
			set
			{
				Appointment previousValue = this._Appointment.Entity;
				if (((previousValue != value) 
							|| (this._Appointment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Appointment.Entity = null;
						previousValue.Invoices.Remove(this);
					}
					this._Appointment.Entity = value;
					if ((value != null))
					{
						value.Invoices.Add(this);
						this._AppointmentID = value.AppointmentID;
					}
					else
					{
						this._AppointmentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Appointment");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_InvoiceDetails(InvoiceDetail entity)
		{
			this.SendPropertyChanging();
			entity.Invoice = this;
		}
		
		private void detach_InvoiceDetails(InvoiceDetail entity)
		{
			this.SendPropertyChanging();
			entity.Invoice = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Bill")]
	public partial class Bill : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BillID;
		
		private System.Nullable<int> _AppointmentID;
		
		private System.Nullable<int> _PatientID;
		
		private System.Nullable<int> _DoctorID;
		
		private System.Nullable<decimal> _TotalAmount;
		
		private string _AddedMonth;
		
		private string _AddedYear;
		
		private string _AddedDay;
		
		private EntitySet<BillDetail> _BillDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBillIDChanging(int value);
    partial void OnBillIDChanged();
    partial void OnAppointmentIDChanging(System.Nullable<int> value);
    partial void OnAppointmentIDChanged();
    partial void OnPatientIDChanging(System.Nullable<int> value);
    partial void OnPatientIDChanged();
    partial void OnDoctorIDChanging(System.Nullable<int> value);
    partial void OnDoctorIDChanged();
    partial void OnTotalAmountChanging(System.Nullable<decimal> value);
    partial void OnTotalAmountChanged();
    partial void OnAddedMonthChanging(string value);
    partial void OnAddedMonthChanged();
    partial void OnAddedYearChanging(string value);
    partial void OnAddedYearChanged();
    partial void OnAddedDayChanging(string value);
    partial void OnAddedDayChanged();
    #endregion
		
		public Bill()
		{
			this._BillDetails = new EntitySet<BillDetail>(new Action<BillDetail>(this.attach_BillDetails), new Action<BillDetail>(this.detach_BillDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BillID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BillID
		{
			get
			{
				return this._BillID;
			}
			set
			{
				if ((this._BillID != value))
				{
					this.OnBillIDChanging(value);
					this.SendPropertyChanging();
					this._BillID = value;
					this.SendPropertyChanged("BillID");
					this.OnBillIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppointmentID", DbType="Int")]
		public System.Nullable<int> AppointmentID
		{
			get
			{
				return this._AppointmentID;
			}
			set
			{
				if ((this._AppointmentID != value))
				{
					this.OnAppointmentIDChanging(value);
					this.SendPropertyChanging();
					this._AppointmentID = value;
					this.SendPropertyChanged("AppointmentID");
					this.OnAppointmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientID", DbType="Int")]
		public System.Nullable<int> PatientID
		{
			get
			{
				return this._PatientID;
			}
			set
			{
				if ((this._PatientID != value))
				{
					this.OnPatientIDChanging(value);
					this.SendPropertyChanging();
					this._PatientID = value;
					this.SendPropertyChanged("PatientID");
					this.OnPatientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoctorID", DbType="Int")]
		public System.Nullable<int> DoctorID
		{
			get
			{
				return this._DoctorID;
			}
			set
			{
				if ((this._DoctorID != value))
				{
					this.OnDoctorIDChanging(value);
					this.SendPropertyChanging();
					this._DoctorID = value;
					this.SendPropertyChanged("DoctorID");
					this.OnDoctorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalAmount", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> TotalAmount
		{
			get
			{
				return this._TotalAmount;
			}
			set
			{
				if ((this._TotalAmount != value))
				{
					this.OnTotalAmountChanging(value);
					this.SendPropertyChanging();
					this._TotalAmount = value;
					this.SendPropertyChanged("TotalAmount");
					this.OnTotalAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedMonth", DbType="VarChar(10)")]
		public string AddedMonth
		{
			get
			{
				return this._AddedMonth;
			}
			set
			{
				if ((this._AddedMonth != value))
				{
					this.OnAddedMonthChanging(value);
					this.SendPropertyChanging();
					this._AddedMonth = value;
					this.SendPropertyChanged("AddedMonth");
					this.OnAddedMonthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedYear", DbType="VarChar(10)")]
		public string AddedYear
		{
			get
			{
				return this._AddedYear;
			}
			set
			{
				if ((this._AddedYear != value))
				{
					this.OnAddedYearChanging(value);
					this.SendPropertyChanging();
					this._AddedYear = value;
					this.SendPropertyChanged("AddedYear");
					this.OnAddedYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDay", DbType="VarChar(10)")]
		public string AddedDay
		{
			get
			{
				return this._AddedDay;
			}
			set
			{
				if ((this._AddedDay != value))
				{
					this.OnAddedDayChanging(value);
					this.SendPropertyChanging();
					this._AddedDay = value;
					this.SendPropertyChanged("AddedDay");
					this.OnAddedDayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bill_BillDetail", Storage="_BillDetails", ThisKey="BillID", OtherKey="BillID")]
		public EntitySet<BillDetail> BillDetails
		{
			get
			{
				return this._BillDetails;
			}
			set
			{
				this._BillDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BillDetails(BillDetail entity)
		{
			this.SendPropertyChanging();
			entity.Bill = this;
		}
		
		private void detach_BillDetails(BillDetail entity)
		{
			this.SendPropertyChanging();
			entity.Bill = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BillDetails")]
	public partial class BillDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BillDetailID;
		
		private System.Nullable<int> _BillID;
		
		private string _BillItem;
		
		private System.Nullable<decimal> _Charges;
		
		private EntityRef<Bill> _Bill;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBillDetailIDChanging(int value);
    partial void OnBillDetailIDChanged();
    partial void OnBillIDChanging(System.Nullable<int> value);
    partial void OnBillIDChanged();
    partial void OnBillItemChanging(string value);
    partial void OnBillItemChanged();
    partial void OnChargesChanging(System.Nullable<decimal> value);
    partial void OnChargesChanged();
    #endregion
		
		public BillDetail()
		{
			this._Bill = default(EntityRef<Bill>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BillDetailID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BillDetailID
		{
			get
			{
				return this._BillDetailID;
			}
			set
			{
				if ((this._BillDetailID != value))
				{
					this.OnBillDetailIDChanging(value);
					this.SendPropertyChanging();
					this._BillDetailID = value;
					this.SendPropertyChanged("BillDetailID");
					this.OnBillDetailIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BillID", DbType="Int")]
		public System.Nullable<int> BillID
		{
			get
			{
				return this._BillID;
			}
			set
			{
				if ((this._BillID != value))
				{
					if (this._Bill.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBillIDChanging(value);
					this.SendPropertyChanging();
					this._BillID = value;
					this.SendPropertyChanged("BillID");
					this.OnBillIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BillItem", DbType="VarChar(20)")]
		public string BillItem
		{
			get
			{
				return this._BillItem;
			}
			set
			{
				if ((this._BillItem != value))
				{
					this.OnBillItemChanging(value);
					this.SendPropertyChanging();
					this._BillItem = value;
					this.SendPropertyChanged("BillItem");
					this.OnBillItemChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Charges", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> Charges
		{
			get
			{
				return this._Charges;
			}
			set
			{
				if ((this._Charges != value))
				{
					this.OnChargesChanging(value);
					this.SendPropertyChanging();
					this._Charges = value;
					this.SendPropertyChanged("Charges");
					this.OnChargesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bill_BillDetail", Storage="_Bill", ThisKey="BillID", OtherKey="BillID", IsForeignKey=true)]
		public Bill Bill
		{
			get
			{
				return this._Bill.Entity;
			}
			set
			{
				Bill previousValue = this._Bill.Entity;
				if (((previousValue != value) 
							|| (this._Bill.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bill.Entity = null;
						previousValue.BillDetails.Remove(this);
					}
					this._Bill.Entity = value;
					if ((value != null))
					{
						value.BillDetails.Add(this);
						this._BillID = value.BillID;
					}
					else
					{
						this._BillID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Bill");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
